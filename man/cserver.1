.TH cserver 1
.SH NAME
cserver \- connection server connects backend consoles to remote frontend terminals
.SH SYNOPSIS
.B cserver
.SH DESCRIPTION
The
.I cserver
daemon allows the \f2cs-console\f1 and \f2cs-status\f1 utilities running
on the XINU Lab frontend machines to connect with the consoles of the
backend machines.

Upon powering up, the backend machines boot from floppy disk, and load
a small monitor program that uses the COM port as console.  These
serial port lines all connect back to a terminal annex, a hardware
device that allows a single host machine to manage the consoles of
many other headless machines.  The
.I cserver
runs on the machine with access to the terminal annex, doling out
access to the consoles over the network to frontends that request
connections via a well-known UDP port.  A configuration file tells the
.I cserver
daemon about each of the connections it can manage -- how to connect
to the console, how to download a kernel, and how to powercycle each
backend.

Kernel downloads are actually a two-step process.  The
.I cserver
works with the \f2cs-console\f1 utility to copy the user-specified
kernel over the network into a temporary directory owned by the
daemon.  Then, when the console for the associated backend is told to
"boot", the monitor on the backend contacts a tftp server running on
the same host as the
.I cserver
and downloads the kernel from the temporary directory.

The current incarnation of
.I cserver
uses TCP Wrappers to prevent unauthorized connections to the daemon.

.PP
.SH FILES
/p/xinu/etc/connections.config  Backend configuration file
.br
/p/xinu/etc/conlog/*  Log files
.SH "SEE ALSO"
cs-console(1), cs-status(1), hosts_access(3), hosts_access(5)
.SH HISTORY
The
.B cserver
daemon has a long history.

The original ancestors of the
.B cserver
are probably Bob Brown's serial-line downloader for LSI-11s, and his
"odt" utility, an early ancestor of \f2cs-console\f1 that connected a
screen/keyboard to a specific serial line.

Around 1978, Doug Comer rewrote the software to be used by multiple
students in multiple courses all sharing multiple backends.  Also
about this time, Comer added a \f2lusers\f1 command that allowed one
to see a list of ``LSI users'', and the predecessor of \f2cs-status\f1
was born.

Raj Yavatkar and Shawn Ostermann expanded the system to a
client-server environment and experimented with an Ethernet
downloader.

Andy Muckelbauer (with help from Shawn Ostermann) rewrote the entire
toolset, changing the paradigm from individual tools to a single
program that handled downloading, status, and console connections.
Thus, the \f2cserver\f1 daemon was born.

Vince Russo and Andy Muckelbauer hooked up the first X10-based
rebooter system to power-cycle backends.

Doug Comer and Vince Russo devised the second, parallel-port driven
rebooter system and Brian Board built the hardware.

John Lin ported Xinu to Intel hardware, created boot disks, and
modified the downloader.  This is the most direct ancestor to the
current XINU Lab architecture.

Mike Evangelista and Gustavo Rodriguez-Rivera reorganized and extended
many aspects of the codebase.

At the turn of the millenium, a large infusion of new backend machines
tripled the scale of the XINU Lab.  Ben Kuperman and Florian
Kerschbaum added PCI ethernet driver support to the base XINU kernel,
allowing modern PC's to be used as backends.

The current incarnation of the console tools (which we will call v2.0,
for lack of any version control over the past two decades,) has been
dusted off and ported to Linux by Chris Telfer and Dennis Brylow.
Dennis established a centralized repository for XINU kernel and
support tool source code, added TCP wrapper support to the connection
server daemon, and designed an extensible, serial-port driven rebooter
system.



